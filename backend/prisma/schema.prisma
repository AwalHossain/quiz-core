// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String?  @unique
  password  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result      Result[]
  examSession ExamSession[]
  leaderboard Leaderboard[]
}

enum UserRole {
  ADMIN
  USER
}

model Exam {
  id            String        @id @default(uuid())
  title         String
  description   String
  duration      Int
  startTime     DateTime?
  endTime       DateTime?
  questionCount Int?
  question      Question[]
  result        Result[]
  examSession   ExamSession[]

  status       ExamStatus    @default(DRAFT)
  passingScore Int?
  leaderboard  Leaderboard[]
  submission   Submission[]
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  COMPLETED
}

model Question {
  id              String       @id @default(uuid())
  examId          String
  exam            Exam         @relation(fields: [examId], references: [id])
  questionText    String
  correctOptionId OptionLetter // Store the option ID here
  type            QuestionType @default(MULTIPLE_CHOICE)

  questionOption QuestionOption[]
  ExamSession    ExamSession[]
  Submission     Submission[]
}

model QuestionOption {
  id           String        @id @default(uuid())
  optionText   String // The actual text of the option (e.g., "American Civil War")
  optionLetter OptionLetter? // Optional: You can store "A", "B", "C", etc. for display
  questionId   String
  question     Question      @relation(fields: [questionId], references: [id])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum OptionLetter {
  A
  B
  C
  D
}

model ExamSession {
  id             String    @id @default(uuid())
  startTime      DateTime
  endTime        DateTime?
  isFinished     Boolean   @default(false)
  totalTimeSpent Int?

  currentQuestionId String?
  currentQuestion   Question? @relation(fields: [currentQuestionId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  examId String
  exam   Exam   @relation(fields: [examId], references: [id])

  status ExamSessionStatus @default(ONGOING)

  submission    Submission[]
  questionOrder QuestionOrder[]

  @@index([userId, examId])
  @@index([id])
}

enum ExamSessionStatus {
  ONGOING
  FINISHED
}

model Submission {
  id             Int         @id @default(autoincrement())
  selectedAnswer OptionLetter?
  orderIndex     Int
  examSessionId  String
  examSession    ExamSession @relation(fields: [examSessionId], references: [id])
  questionId     String
  question       Question    @relation(fields: [questionId], references: [id])
  isSkipped      Boolean     @default(false)
  isCorrect      Boolean?
  exam           Exam        @relation(fields: [examId], references: [id])
  examId         String

  @@unique([examSessionId, questionId])
  @@index([examSessionId, questionId])
  @@index([orderIndex])
}

model Result {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  examId       String
  exam         Exam          @relation(fields: [examId], references: [id])
  totalScore   Int
  correctCount Int
  wrongCount   Int
  skippedCount Int
  unansweredCount Int?
  position     Int?
  totalTimeSpent    Int?
  leaderboard  Leaderboard[]

  @@index([userId, examId])
  @@index([id])
}

model Leaderboard {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  examId String
  exam   Exam   @relation(fields: [examId], references: [id])

  result   Result @relation(fields: [resultId], references: [id])
  resultId String

  position  Int
  timeSpent Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([examId, userId])
  @@index([examId, userId])
  @@index([id])
}

model QuestionOrder {
  id            String      @id @default(uuid())
  examSessionId String
  examSession   ExamSession @relation(fields: [examSessionId], references: [id])
  questionId    String
  orderIndex    Int

  @@unique([examSessionId, questionId])
  @@unique([examSessionId, orderIndex])
  @@index([examSessionId, questionId])
  @@index([examSessionId, orderIndex])
}
